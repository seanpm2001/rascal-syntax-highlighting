# [PackageDev] target_format: plist, ext: tmLanguage
# Inspired by Official Java Grammar https://github.com/textmate/java.tmbundle
# Inspired by Idris Grammar https://github.com/idris-hackers/idris-sublime
---
name: Rascal
scopeName: source.rascal
fileTypes: [rsc]
uuid: 6d5574d4-85af-4e00-9f3c-9b5fa60f53b8

patterns:
-  name: comment.line.double-slash.rascal
   match: //.*$\n?
-  name: comment.block.rascal
   begin: "/\\*"
   end: "\\*/"
-  name: meta.annotation.rascal
   begin: (@[^ {]+)({)
   beginCaptures:
     '1': {name: storage.type.annotation.rascal}
     '2': {name: punctuation.annotation-argument.begin.rascal}
   end: (})
   endCaptures:
     '1': {name: punctuation.annotation-argument.end.rascal}
-  name: constant.numeric.decimal.rascal
   match: (0(?![0-9a-z_A-Z])|[1-9][0-9]*(?![0-9a-z_A-Z]))
-  name: constant.numeric.hex.rascal
   match: 0[Xx][0-9A-Fa-f]+(?![0-9a-z_A-Z])
-  name: constant.numeric.octal.rascal
   match: 0[0-7]+(?![0-9a-z_A-Z])
-  name: string.regexp.rascal
   begin: /
   end: /([dims]*)
   endCaptures:
     '1': {name: storage.modifier.regex.rascal}
   include: '#regex_escape'
-  name: string.quoted.single.rascal
   begin: \'
   end: \'
   include: '#string_escape'
-  name: string.quoted.double.rascal
   begin: \"
   end: \"
   include: '#string_escape'
   include: '#string_interpolation'
-  name: string.other.datetime.rascal
   begin: \\$
   end: \\$
   # TODO Add protocol literals here
-  name: constant.numeric.real.rascal
   match: "([0-9]+[dDfF]
           |[0-9]+[eE][+\\-]?[0-9]+[dDfF]?
           |[0-9]+\\.(?!\\.)[0-9]*[dDfF]?
           |[0-9]+\\.[0-9]*[eE][+\\-]?[0-9]+[dDfF]?
           |\\.(?!\\.)[0-9]+[dDfF]?
           |\\.(?!\\.)[0-9]+[eE][+\\-]?[0-9]+[dDfF]?
           )"
-  name: constant.language.bool.rascal
   match: \b(true|false)\b
-  name: constant.numeric.rational.rascal
   match: "([0-9][0-9]*r|[1-9][0-9]*r[0-9][0-9]*(?![0-9a-z_A-Z]))"
-  name: keyword.control.rascal
   match: '\b(syntax|keyword|lexical|break|continue|finally|private|fail|filter|if|tag|extend|append|non-assoc|assoc|test|anno|layout|data|join|it|bracket|in|import|all|solve|try|catch|notin|else|insert|switch|return|case|while|throws|visit|for|assert|default|map|alias|any|module|mod|public|one|throw|start)\b'
-  name: support.type.basic.rascal
   match: '\b(value|loc|node|num|type|bag|int|rat|rel|lrel|real|tuple|str|bool|void|datetime|set|map|list)\b'
repository:
  regex_escape:
  - name: constant.character.escape.regex.rascal
    match: "\\(/|<|>|\\)"
  string_escape:
  - name: constant.character.escape.ordinary.rascal
    match: "\\(\"|'|<|>|\\|[bnfrt])"
  - name: constant.character.escape.unicode.rascal
    match: "\\(u[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]
              |U(0[0-9 A-F a-f]|10)[0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f][0-9A-Fa-f]
              |a[0-7][0-9A-Fa-f]
              )"
  - name: storage.modifier.string.margin.rascal
    match: \\n\\s*\'
  string_interpolation:
  - name: entity.interpolated-string.rascal
    begin: "<"
    end: ">"
...